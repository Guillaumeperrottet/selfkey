/**
 * Script pour corriger les commissions manquantes des r√©servations existantes
 * Usage: node fix-commissions.js
 */

import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function fixCommissions() {
  console.log("üîß Correction des commissions manquantes");
  console.log("========================================\n");

  try {
    // R√©cup√©rer toutes les r√©servations avec leurs √©tablissements
    const bookings = await prisma.booking.findMany({
      include: {
        establishment: {
          select: {
            name: true,
            commissionRate: true,
            fixedFee: true,
          },
        },
        room: {
          select: {
            name: true,
          },
        },
      },
      orderBy: { bookingDate: "desc" },
    });

    console.log(`üìä Trouv√© ${bookings.length} r√©servations √† v√©rifier\n`);

    let fixedCount = 0;
    let alreadyCorrectCount = 0;

    for (const booking of bookings) {
      const expectedCommission = Math.round(
        (booking.amount * booking.establishment.commissionRate) / 100 +
          booking.establishment.fixedFee
      );
      const expectedOwnerAmount = booking.amount - expectedCommission;

      const isCommissionCorrect =
        booking.platformCommission === expectedCommission;
      const isOwnerAmountCorrect = booking.ownerAmount === expectedOwnerAmount;

      if (isCommissionCorrect && isOwnerAmountCorrect) {
        alreadyCorrectCount++;
        console.log(
          `‚úÖ ${booking.establishment.name} - ${booking.room.name} (${booking.clientEmail})`
        );
        console.log(
          `   Montant: ${booking.amount} CHF | Commission: ${booking.platformCommission} CHF | Propri√©taire: ${booking.ownerAmount} CHF`
        );
      } else {
        console.log(
          `üîß CORRECTION: ${booking.establishment.name} - ${booking.room.name} (${booking.clientEmail})`
        );
        console.log(`   Montant: ${booking.amount} CHF`);
        console.log(
          `   Commission: ${booking.platformCommission} CHF ‚Üí ${expectedCommission} CHF`
        );
        console.log(
          `   Propri√©taire: ${booking.ownerAmount} CHF ‚Üí ${expectedOwnerAmount} CHF`
        );
        console.log(
          `   Taux appliqu√©: ${booking.establishment.commissionRate}% + ${booking.establishment.fixedFee} CHF`
        );

        // Demander confirmation (pour la d√©mo, on corrige automatiquement)
        const shouldFix = true; // En production, vous pourriez demander confirmation

        if (shouldFix) {
          await prisma.booking.update({
            where: { id: booking.id },
            data: {
              platformCommission: expectedCommission,
              ownerAmount: expectedOwnerAmount,
            },
          });
          fixedCount++;
          console.log(`   ‚úÖ Corrig√© !`);
        } else {
          console.log(`   ‚è≠Ô∏è  Ignor√©`);
        }
      }
      console.log("");
    }

    console.log("\nüìà R√©sum√© des corrections");
    console.log("=========================");
    console.log(`‚úÖ R√©servations d√©j√† correctes: ${alreadyCorrectCount}`);
    console.log(`üîß R√©servations corrig√©es: ${fixedCount}`);
    console.log(`üìä Total trait√©: ${bookings.length}`);

    // V√©rifier les nouvelles statistiques
    const newStats = await prisma.booking.aggregate({
      _sum: { platformCommission: true },
      _count: { platformCommission: true },
    });

    console.log(
      `\nüí∞ Nouveau total de commissions: ${newStats._sum.platformCommission || 0} CHF`
    );

    if (newStats._count.platformCommission > 0) {
      const avgCommission =
        (newStats._sum.platformCommission || 0) /
        newStats._count.platformCommission;
      console.log(`üìà Commission moyenne: ${avgCommission.toFixed(2)} CHF`);
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la correction:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Fonction pour v√©rifier uniquement (sans corriger)
async function verifyCommissions() {
  console.log("üîç V√©rification des commissions (mode lecture seule)");
  console.log("==================================================\n");

  try {
    const bookings = await prisma.booking.findMany({
      include: {
        establishment: {
          select: {
            name: true,
            commissionRate: true,
            fixedFee: true,
          },
        },
      },
    });

    let correctCount = 0;
    let incorrectCount = 0;
    let totalDifference = 0;

    for (const booking of bookings) {
      const expectedCommission = Math.round(
        (booking.amount * booking.establishment.commissionRate) / 100 +
          booking.establishment.fixedFee
      );

      const isCorrect = booking.platformCommission === expectedCommission;
      const difference = expectedCommission - booking.platformCommission;

      if (isCorrect) {
        correctCount++;
      } else {
        incorrectCount++;
        totalDifference += difference;
      }
    }

    console.log(`üìä R√©servations correctes: ${correctCount}`);
    console.log(`‚ùå R√©servations incorrectes: ${incorrectCount}`);
    console.log(`üí∞ Total commissions manquantes: ${totalDifference} CHF`);
    console.log(
      `üìà Pr√©cision: ${((correctCount / bookings.length) * 100).toFixed(1)}%`
    );
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la correction ou la v√©rification selon l'argument
const mode = process.argv[2];

if (mode === "verify") {
  verifyCommissions();
} else if (mode === "fix") {
  fixCommissions();
} else {
  console.log("Usage:");
  console.log("  node fix-commissions.js verify  # V√©rifier seulement");
  console.log("  node fix-commissions.js fix     # Corriger les commissions");
}
