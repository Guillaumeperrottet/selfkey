#!/usr/bin/env node

/**
 * Script pour vider compl√®tement la base de donn√©es
 * Pr√©serve uniquement le compte super-admin
 *
 * ATTENTION: Ce script supprime TOUTES les donn√©es !
 * Utilisez avec pr√©caution, uniquement en d√©veloppement.
 *
 * Usage: node reset-database.js
 */

import { PrismaClient } from "@prisma/client";
import readline from "readline";

const prisma = new PrismaClient();

// Configuration du super-admin √† pr√©server
const SUPER_ADMIN_EMAIL = "admin@selfkey.local";

async function confirmAction() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    rl.question(
      "‚ö†Ô∏è  ATTENTION: Cette action va supprimer TOUTES les donn√©es de la base !\n" +
        "   Seul le compte super-admin sera pr√©serv√©.\n" +
        "   √ätes-vous s√ªr de vouloir continuer ? (oui/non): ",
      (answer) => {
        rl.close();
        resolve(answer.toLowerCase() === "oui" || answer.toLowerCase() === "o");
      }
    );
  });
}

async function resetDatabase() {
  console.log("üóÑÔ∏è  D√©but du nettoyage de la base de donn√©es...\n");

  try {
    // 1. Supprimer les donn√©es dans l'ordre (√† cause des contraintes de cl√©s √©trang√®res)

    console.log("üî• Suppression des r√©servations...");
    const deletedBookings = await prisma.booking.deleteMany({
      where: {
        clientEmail: {
          not: SUPER_ADMIN_EMAIL, // Ne pas supprimer les r√©servations du super-admin si il en a
        },
      },
    });
    console.log(`   ‚úÖ ${deletedBookings.count} r√©servations supprim√©es`);

    console.log("üî• Suppression des chambres...");
    const deletedRooms = await prisma.room.deleteMany({});
    console.log(`   ‚úÖ ${deletedRooms.count} chambres supprim√©es`);

    console.log("üî• Suppression des codes d'acc√®s...");
    const deletedAccessCodes = await prisma.accessCode.deleteMany({});
    console.log(`   ‚úÖ ${deletedAccessCodes.count} codes d'acc√®s supprim√©s`);

    console.log("üî• Suppression des int√©grations...");
    const deletedIntegrations = await prisma.integration.deleteMany({});
    console.log(`   ‚úÖ ${deletedIntegrations.count} int√©grations supprim√©es`);

    console.log("üî• Suppression des √©tablissements...");
    const deletedEstablishments = await prisma.establishment.deleteMany({});
    console.log(
      `   ‚úÖ ${deletedEstablishments.count} √©tablissements supprim√©s`
    );

    // 2. Supprimer les donn√©es d'authentification (sauf le super-admin)
    console.log("üî• Suppression des sessions...");
    const deletedSessions = await prisma.session.deleteMany({
      where: {
        user: {
          email: {
            not: SUPER_ADMIN_EMAIL,
          },
        },
      },
    });
    console.log(`   ‚úÖ ${deletedSessions.count} sessions supprim√©es`);

    console.log("üî• Suppression des comptes...");
    const deletedAccounts = await prisma.account.deleteMany({
      where: {
        user: {
          email: {
            not: SUPER_ADMIN_EMAIL,
          },
        },
      },
    });
    console.log(`   ‚úÖ ${deletedAccounts.count} comptes supprim√©s`);

    console.log("üî• Suppression des tokens de v√©rification...");
    const deletedVerificationTokens = await prisma.verificationToken.deleteMany(
      {
        where: {
          identifier: {
            not: SUPER_ADMIN_EMAIL,
          },
        },
      }
    );
    console.log(`   ‚úÖ ${deletedVerificationTokens.count} tokens supprim√©s`);

    console.log("üî• Suppression des utilisateurs (sauf super-admin)...");
    const deletedUsers = await prisma.user.deleteMany({
      where: {
        email: {
          not: SUPER_ADMIN_EMAIL,
        },
      },
    });
    console.log(`   ‚úÖ ${deletedUsers.count} utilisateurs supprim√©s`);

    // 3. V√©rifier que le super-admin existe toujours
    console.log("\nüîç V√©rification du super-admin...");
    const superAdmin = await prisma.user.findUnique({
      where: {
        email: SUPER_ADMIN_EMAIL,
      },
    });

    if (superAdmin) {
      console.log(`   ‚úÖ Super-admin pr√©serv√©: ${superAdmin.email}`);
    } else {
      console.log("   ‚ö†Ô∏è  Super-admin non trouv√© dans la base");
    }

    // 4. Statistiques finales
    console.log("\nüìä √âtat final de la base de donn√©es:");
    const finalStats = await Promise.all([
      prisma.user.count(),
      prisma.establishment.count(),
      prisma.room.count(),
      prisma.booking.count(),
      prisma.accessCode.count(),
      prisma.integration.count(),
      prisma.session.count(),
      prisma.account.count(),
    ]);

    console.log(`   üë• Utilisateurs: ${finalStats[0]}`);
    console.log(`   üè® √âtablissements: ${finalStats[1]}`);
    console.log(`   üè† Chambres: ${finalStats[2]}`);
    console.log(`   üìÖ R√©servations: ${finalStats[3]}`);
    console.log(`   üîê Codes d'acc√®s: ${finalStats[4]}`);
    console.log(`   üîó Int√©grations: ${finalStats[5]}`);
    console.log(`   üîë Sessions: ${finalStats[6]}`);
    console.log(`   üë§ Comptes: ${finalStats[7]}`);

    console.log("\nüéâ Nettoyage termin√© avec succ√®s !");
    console.log(
      "   La base de donn√©es est maintenant vide (sauf le super-admin)."
    );
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage:", error);
    throw error;
  }
}

async function main() {
  console.log("üßπ Script de nettoyage de la base de donn√©es");
  console.log("==========================================\n");

  // Demander confirmation
  const confirmed = await confirmAction();
  if (!confirmed) {
    console.log("‚ùå Op√©ration annul√©e par l'utilisateur");
    process.exit(0);
  }

  try {
    await resetDatabase();
  } catch (error) {
    console.error("‚ùå Erreur fatale:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Gestion des arguments
const arg = process.argv[2];

if (arg === "--force") {
  // Mode force, pas de confirmation
  console.log("üßπ Mode force activ√© - Nettoyage sans confirmation");
  resetDatabase()
    .then(() => console.log("‚úÖ Nettoyage termin√©"))
    .catch(console.error)
    .finally(() => prisma.$disconnect());
} else if (arg === "--help" || arg === "-h") {
  console.log("Usage:");
  console.log("  node reset-database.js        # Nettoyage avec confirmation");
  console.log("  node reset-database.js --force # Nettoyage sans confirmation");
  console.log("  node reset-database.js --help  # Afficher cette aide");
  console.log("");
  console.log("‚ö†Ô∏è  ATTENTION: Ce script supprime TOUTES les donn√©es !");
  console.log("   Seul le compte super-admin est pr√©serv√©.");
} else {
  main();
}
