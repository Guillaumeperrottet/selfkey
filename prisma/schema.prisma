generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                  @id @default(cuid())
  name               String?
  email              String                  @unique
  image              String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  emailVerified      Boolean?                @default(false)
  establishments     UserEstablishment[]
  accounts           Account[]
  transfersInitiated EstablishmentTransfer[] @relation("TransferFrom")
  transfersReceived  EstablishmentTransfer[] @relation("TransferTo")
  excelExports       ExcelExportHistory[]
  sessions           Session[]

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  type                  String    @default("oauth")
  accountId             String
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  idToken               String?
  password              String?
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  providerId            String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model UserEstablishment {
  id              String        @id @default(cuid())
  userId          String
  establishmentId String
  role            String        @default("owner")
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, establishmentId])
}

model Establishment {
  id                                  String                  @id @default(cuid())
  slug                                String                  @unique
  name                                String
  stripeAccountId                     String?
  stripeOnboarded                     Boolean                 @default(false)
  commissionRate                      Float                   @default(0)
  fixedFee                            Float                   @default(3.00)
  createdAt                           DateTime                @default(now())
  accessCodeType                      String                  @default("room")
  accessInstructions                  String?
  generalAccessCode                   String?
  maxBookingDays                      Int                     @default(4)
  confirmationEmailEnabled            Boolean                 @default(true)
  confirmationEmailFrom               String?
  confirmationEmailTemplate           String?
  confirmationWhatsappEnabled         Boolean                 @default(false)
  confirmationWhatsappFrom            String?
  confirmationWhatsappTemplate        String?
  allowFutureBookings                 Boolean                 @default(false)
  cutoffTime                          String?                 @default("22:00")
  enableCutoffTime                    Boolean                 @default(false)
  reopenTime                          String?                 @default("00:00")
  hotelContactEmail                   String?
  hotelContactPhone                   String?
  dayParkingTarif1h                   Float?                  @default(5.00)
  dayParkingTarif2h                   Float?                  @default(8.00)
  dayParkingTarif3h                   Float?                  @default(12.00)
  dayParkingTarif4h                   Float?                  @default(15.00)
  dayParkingTarifFullDay              Float?                  @default(35.00)
  dayParkingTarifHalfDay              Float?                  @default(20.00)
  enableDayParking                    Boolean                 @default(false)
  dayParkingCommissionRate            Float                   @default(5.0)
  dayParkingEmailTemplate             String?
  formConfig                          Json?                   @default("{}")
  checkinTime                         String?                 @default("12:05")
  checkoutTime                        String?                 @default("12:00")
  parkingOnlyMode                     Boolean                 @default(false)
  touristTaxAmount                    Float                   @default(3.00)
  touristTaxEnabled                   Boolean                 @default(true)
  dayParkingFixedFee                  Float                   @default(0.00)
  enableDogOption                     Boolean                 @default(false)
  enableEmailCopyOnConfirmation       Boolean                 @default(false)
  emailCopyAddresses                  String[]
  address                             String?
  city                                String?
  country                             String?                 @default("Switzerland")
  latitude                            Float?
  longitude                           Float?
  postalCode                          String?
  mapDescription                      String?
  mapImage                            String?
  mapTitle                            String?
  showOnMap                           Boolean                 @default(true)
  confirmationEmailTemplateWithDog    String?
  confirmationEmailTemplateWithoutDog String?
  confirmationEmailDesign             Json?
  confirmationEmailDesignWithDog      Json?
  confirmationEmailDesignWithoutDog   Json?
  hidePlatformFees                    Boolean                 @default(false)
  users                               UserEstablishment[]
  bookings                            Booking[]
  emailImages                         EmailImage[]
  transfers                           EstablishmentTransfer[]
  excelExports                        ExcelExportHistory[]
  integrations                        Integration[]
  pricingOptions                      PricingOption[]
  rooms                               Room[]

  @@map("establishments")
}

model Room {
  id            String        @id @default(cuid())
  hotelSlug     String
  name          String
  price         Float
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  accessCode    String?
  allowDogs     Boolean       @default(false)
  bookings      Booking[]
  establishment Establishment @relation(fields: [hotelSlug], references: [slug], onDelete: Cascade)

  @@map("rooms")
}

model Booking {
  id                     String        @id @default(cuid())
  bookingNumber          Int           @unique @default(autoincrement())
  hotelSlug              String
  roomId                 String?
  clientEmail            String
  amount                 Float
  currency               String        @default("CHF")
  platformCommission     Float         @default(0)
  ownerAmount            Float
  bookingDate            DateTime      @default(now())
  stripePaymentIntentId  String?
  guests                 Int           @default(1)
  checkInDate            DateTime
  checkOutDate           DateTime
  clientAddress          String
  clientBirthDate        DateTime
  clientCity             String
  clientCountry          String
  clientFirstName        String
  clientIdNumber         String
  clientIdType           String?       // Type de pièce d'identité: "ID card", "Passport", "Driving license"
  clientLastName         String
  clientPhone            String
  clientPostalCode       String
  pricingOptionsTotal    Float         @default(0)
  selectedPricingOptions Json?
  confirmationMethod     String?
  confirmationSent       Boolean       @default(false)
  confirmationSentAt     DateTime?
  adults                 Int           @default(1)
  children               Int           @default(0)
  clientBirthPlace       String?
  clientVehicleNumber    String?
  paymentStatus          String        @default("pending")
  bookingType            String        @default("night")
  dayParkingDuration     String?
  dayParkingEndTime      DateTime?
  dayParkingStartTime    DateTime?
  emailConfirmation      Boolean       @default(true)
  touristTaxTotal        Float         @default(0)
  hasDog                 Boolean       @default(false)
  establishment          Establishment @relation(fields: [hotelSlug], references: [slug])
  room                   Room?         @relation(fields: [roomId], references: [id])
  invoice                Invoice?

  @@map("bookings")
}

model PricingOption {
  id              String               @id @default(cuid())
  establishmentId String
  name            String
  type            String
  isRequired      Boolean              @default(false)
  isActive        Boolean              @default(true)
  displayOrder    Int                  @default(0)
  createdAt       DateTime             @default(now())
  values          PricingOptionValue[]
  establishment   Establishment        @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("pricing_options")
}

model PricingOptionValue {
  id              String        @id @default(cuid())
  pricingOptionId String
  label           String
  priceModifier   Float
  isDefault       Boolean       @default(false)
  displayOrder    Int           @default(0)
  createdAt       DateTime      @default(now())
  pricingOption   PricingOption @relation(fields: [pricingOptionId], references: [id], onDelete: Cascade)

  @@map("pricing_option_values")
}

model Integration {
  id                String           @id @default(cuid())
  establishmentSlug String
  type              String
  name              String
  status            String           @default("disconnected")
  configuration     Json
  lastSync          DateTime?
  lastError         String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  logs              IntegrationLog[]
  establishment     Establishment    @relation(fields: [establishmentSlug], references: [slug], onDelete: Cascade)

  @@map("integrations")
}

model IntegrationLog {
  id            String      @id @default(cuid())
  integrationId String
  action        String
  status        String
  message       String
  data          Json?
  createdAt     DateTime    @default(now())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@map("integration_logs")
}

model ExcelExportHistory {
  id                String        @id @default(cuid())
  establishmentSlug String
  startDate         DateTime
  endDate           DateTime
  fileName          String
  recordsCount      Int
  exportedAt        DateTime      @default(now())
  userId            String?
  establishment     Establishment @relation(fields: [establishmentSlug], references: [slug], onDelete: Cascade)
  user              User?         @relation(fields: [userId], references: [id])

  @@map("excel_export_history")
}

model EstablishmentTransfer {
  id              String        @id @default(cuid())
  establishmentId String
  fromUserId      String
  toUserEmail     String
  toUserId        String
  transferredAt   DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  fromUser        User          @relation("TransferFrom", fields: [fromUserId], references: [id])
  toUser          User          @relation("TransferTo", fields: [toUserId], references: [id])

  @@map("establishment_transfers")
}

model EmailImage {
  id              String        @id @default(cuid())
  fileName        String
  originalName    String
  cloudinaryUrl   String
  cloudinaryId    String
  establishmentId String
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@map("email_images")
}

model Invoice {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  filename    String
  filePath    String
  generatedAt DateTime @default(now())
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("invoices")
}
