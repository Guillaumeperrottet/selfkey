generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(cuid())
  name           String?
  email          String              @unique
  emailVerified  Boolean?            @default(false)
  image          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  accounts       Account[]
  sessions       Session[]
  establishments UserEstablishment[]
  
  @@map("user")
}

model Account {
  id                     String   @id @default(cuid())
  userId                 String
  type                   String   @default("oauth")
  providerId             String   // Better Auth utilise providerId
  accountId              String
  accessToken            String?
  refreshToken           String?
  idToken                String?
  accessTokenExpiresAt   DateTime?
  refreshTokenExpiresAt  DateTime?
  scope                  String?
  password               String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model UserEstablishment {
  id              String        @id @default(cuid())
  userId          String
  establishmentId String
  role            String        @default("owner")
  createdAt       DateTime      @default(now())
  establishment   Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, establishmentId])
}

model Establishment {
  id              String              @id @default(cuid())
  slug            String              @unique
  name            String
  stripeAccountId String?
  stripeOnboarded Boolean             @default(false)
  commissionRate  Float               @default(0)
  fixedFee        Float               @default(0)
  // Système de codes d'accès
  accessCodeType  String              @default("room") // "room", "general", "custom"
  generalAccessCode String?           // Code général pour tout l'établissement
  accessInstructions String?          // Instructions personnalisées (JSON ou text)
  createdAt       DateTime            @default(now())
  users           UserEstablishment[]
  bookings        Booking[]
  rooms           Room[]

  @@map("establishments")
}

model Room {
  id            String        @id @default(cuid())
  hotelSlug     String
  name          String
  price         Float
  isActive      Boolean       @default(true)
  accessCode    String?       // Code d'accès spécifique à cette chambre
  createdAt     DateTime      @default(now())
  bookings      Booking[]
  establishment Establishment @relation(fields: [hotelSlug], references: [slug], onDelete: Cascade)

  @@map("rooms")
}

model Booking {
  id                    String        @id @default(cuid())
  hotelSlug             String
  roomId                String
  clientName            String
  clientEmail           String
  phone                 String
  amount                Float
  currency              String        @default("CHF")
  platformCommission    Float         @default(0)
  ownerAmount           Float
  bookingDate           DateTime      @default(now())
  stripePaymentIntentId String?
  guests                Int           @default(1)
  establishment         Establishment @relation(fields: [hotelSlug], references: [slug])
  room                  Room          @relation(fields: [roomId], references: [id])

  @@map("bookings")
}
