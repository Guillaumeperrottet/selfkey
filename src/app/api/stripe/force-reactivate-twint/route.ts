import { NextRequest, NextResponse } from "next/server";
import { stripe } from "@/lib/stripe";

export async function POST(request: NextRequest) {
  try {
    const { accountId } = await request.json();

    if (!accountId) {
      return NextResponse.json(
        { error: "Account ID est requis" },
        { status: 400 }
      );
    }

    console.log(
      `üîÑ Tentative de r√©activation forc√©e de TWINT pour ${accountId}`
    );

    // √âtape 1: D√©sactiver TWINT (si possible)
    try {
      await stripe.accounts.updateCapability(accountId, "twint_payments", {
        requested: false,
      });
      console.log("‚úÖ TWINT d√©sactiv√©");
    } catch {
      console.log("‚ö†Ô∏è Impossible de d√©sactiver TWINT (d√©j√† inactif)");
    }

    // Attendre un peu
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // √âtape 2: R√©activer TWINT
    const capability = await stripe.accounts.updateCapability(
      accountId,
      "twint_payments",
      {
        requested: true,
      }
    );

    console.log("‚úÖ TWINT r√©activ√©:", capability.status);

    return NextResponse.json({
      success: true,
      capability,
      message: `TWINT r√©activ√© avec le statut: ${capability.status}`,
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©activation forc√©e:", error);

    return NextResponse.json(
      {
        error: "Erreur lors de la r√©activation",
        details: error instanceof Error ? error.message : "Erreur inconnue",
      },
      { status: 500 }
    );
  }
}
